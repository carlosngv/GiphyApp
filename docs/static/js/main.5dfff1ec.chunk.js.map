{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","className","value","onChange","target","placeholder","getGifs","category","a","URL","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","imgs","setTimeout","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uKAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCJDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,mCACA,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAASP,GAAT,mBAAwBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,UAAU,mBACVC,MAAOV,EACPW,SAnBY,SAACR,GACrBF,EAAcE,EAAES,OAAOF,QAmBfG,YAAY,a,+BC3BfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACAC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QARtB,kBAWZL,GAXY,4CAAH,sDCEPQ,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,sBAAKnB,UAAU,6CAAf,UACI,qBAAKA,UAAU,aAAf,SACI,wBAAQA,UAAU,gBAAlB,SACI,qBAAKuB,IAAKJ,EAAKK,IAAKN,QAG5B,qBAAKlB,UAAU,eAAf,SACI,qBAAKA,UAAU,UAAf,SACI,4BAAIkB,YCRXO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAGZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IALyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAoBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHxB,MAAK,SAACgD,GACHC,YAAW,WACPH,EAAS,CACLf,KAAMiB,EACNJ,SAAS,MAEd,UAEZ,CAACpB,IAEGqB,EDlB2BK,CAAa1B,GAAjCc,EAFuB,EAE7BP,KAAca,EAFe,EAEfA,QAEtB,OACI,eAAC,WAAD,WACI,oBAAI1B,UAAU,wDAAd,SAAuEM,IACvE,sBAAKN,UAAU,YAAf,UACS0B,GAAW,aAGRN,EAAOL,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,cES1BgB,EAvBA,WAAO,IAAD,EAEmB3C,mBAAS,IAF5B,mBAEV4C,EAFU,KAEE7C,EAFF,KAIjB,OACI,qCACI,oBAAIW,UAAU,aAAd,4BACA,cAAC,EAAD,CAAaX,cAAgBA,IAC7B,uBAEQ6C,EAAWnB,KAAI,SAACT,GACZ,OACI,cAAC,EAAD,CAEAA,SAAUA,GADLA,UCVjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAG1B3D,M","file":"static/js/main.5dfff1ec.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('')\n\n    const _handleOnChange = (e) => {\n        setinputValue(e.target.value)\n    }\n\n    const _handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2) {\n            setCategories((c) => [ inputValue, ...c]);\n            setinputValue('');\n        }\n    }\n\n    return (\n        <>\n        <form onSubmit={_handleSubmit}>\n            <input\n                type=\"text\"\n                className=\"input is-rounded\"\n                value={inputValue}\n                onChange={_handleOnChange}\n                placeholder='Gif'\n            />\n        </form>\n        </>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=xIH14G8j1Fnj7v8fPdyo7OyimbiM2GX6&limit=10`;\n    let response = await fetch(URL);\n    let { data } = await response.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__backInLeft\">\n            <div className=\"card-image\">\n                <figure className=\"image is-4by3\">\n                    <img src={url} alt={title} />\n                </figure>\n            </div>\n            <div className=\"card-content\">\n                <div className=\"content\">\n                    <p>{title}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { Fragment} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n         \n    return (\n        <Fragment>\n            <h1 className=\"category-title animate__animated animate__backInRight\">{category}</h1>\n            <div className=\"card-grid\">\n                    {loading && 'Loading...'} \n                    {\n                        \n                        images.map((img) => (\n                            <GifGridItem\n                                key={img.id}\n                                {...img}\n                            />\n                        ))\n                    }\n            </div>\n        </Fragment>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    useEffect(() => {\n        getGifs(category)\n            .then((imgs) => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                }, 500)\n            });\n    }, [category]);\n\n    return state; // data: [], loading: true\n}","import React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nconst GifApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return(\n        <>\n            <h1 className=\"title is-1\">Giphy Searcher</h1>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n                { \n                    categories.map((category) => {\n                        return (\n                            <GifGrid \n                            key={category}\n                            category={category}\n                            />\n                        );\n                    })\n                }\n        </>\n    );\n}\n\nexport default GifApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifApp from './GifApp';\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}